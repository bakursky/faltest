import { fal } from "@fal-ai/client";
import { NextResponse } from "next/server";

// Store the last generated image URL in memory
let lastGeneratedImageUrl = null;
let lastGenerationTimestamp = null;

async function generateDailyImage() {
  try {
    const stream = await fal.stream("workflows/bakursky/landscape-image-generation", {
      input: {}, // Add required inputs here if necessary
    });
    let imageUrl = null;
    let streamCompleted = false;

    for await (const event of stream) {
      console.log("Event received:", JSON.stringify(event, null, 2));
      
      if (event.type === "completion" && event.output?.images?.length > 0) {
        imageUrl = event.output.images[0]?.url;
      }
    }

    try {
      await stream.done();
      streamCompleted = true;
    } catch (doneError) {
      console.error("Error completing workflow stream:", doneError);
    }

    if (!streamCompleted) {
      throw new Error("Workflow stream did not complete successfully.");
    }

    if (!imageUrl || !imageUrl.startsWith("http")) {
      throw new Error("No valid Image URL was generated by the workflow.");
    }

    // Store the image URL and timestamp
    lastGeneratedImageUrl = imageUrl;
    lastGenerationTimestamp = Date.now();

    return imageUrl;
  } catch (error) {
    console.error("Error in workflow processing:", error);
    throw error;
  }
}

export async function POST(request) {
  // Check if this is a cron job request
  const authHeader = request.headers.get('authorization');
  const isCronJob = authHeader === `Bearer ${process.env.CRON_SECRET}`;
  
  // Regenerate image if:
  // 1. It's a cron job request, OR
  // 2. No image has been generated yet, OR
  // 3. Image is older than 24 hours
  const shouldRegenerateImage = isCronJob || 
    !lastGeneratedImageUrl || 
    (Date.now() - lastGenerationTimestamp > 24 * 60 * 60 * 1000);

  try {
    // If it's not a cron job and we have a recent image, return it
    if (!isCronJob && lastGeneratedImageUrl && 
        (Date.now() - lastGenerationTimestamp <= 24 * 60 * 60 * 1000)) {
      return NextResponse.json({ 
        success: true, 
        imageUrl: lastGeneratedImageUrl 
      });
    }

    // Generate a new image
    const imageUrl = await generateDailyImage();
    return NextResponse.json({ success: true, imageUrl });
  } catch (error) {
    console.error("Error in image generation:", error);
    return NextResponse.json({ 
      success: false, 
      error: error.message 
    }, { status: 500 });
  }
}

// Optional GET method to retrieve the latest generated image
export async function GET() {
  if (lastGeneratedImageUrl) {
    return NextResponse.json({ 
      success: true, 
      imageUrl: lastGeneratedImageUrl 
    });
  }

  return NextResponse.json({ 
    success: false, 
    message: "No image has been generated yet" 
  }, { status: 404 });
}