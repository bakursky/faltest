import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({ children }) {
  let imageUrl = "/default-background.jpg"; // Fallback background
  try {
    // Use the full absolute URL including the protocol and domain
    const apiUrl = process.env.NEXT_PUBLIC_SITE_URL || 
                   process.env.VERCEL_URL ? 
                   `https://${process.env.VERCEL_URL}` : 
                   "http://localhost:3000";

    const fullApiUrl = `${apiUrl}/api/generate-image`;

    console.log("Attempting to fetch image from:", fullApiUrl);

    const res = await fetch(fullApiUrl, {
      method: "POST",
      cache: "no-store",
    });

    if (!res.ok) {
      console.error(`API response not ok: ${res.status} ${res.statusText}`);
      throw new Error(`API response not ok: ${res.status} ${res.statusText}`);
    }

    const data = await res.json();
    if (data.success && data.imageUrl) {
      imageUrl = data.imageUrl;
    }
  } catch (error) {
    console.error("Error fetching image:", error);
    // Will use default background image
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        style={{ 
          backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${imageUrl})`, 
          backgroundSize: "cover",
          backgroundPosition: "center"
        }}
      >
        {children}
      </body>
    </html>
  );
}